/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stripe;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.stripe.Stripe;
import com.stripe.net.Webhook;

import spark.Request;
import spark.Response;

import com.stripe.model.Account;
import com.stripe.model.Event;
import com.stripe.exception.SignatureVerificationException;
import com.stripe.exception.StripeException;

import static spark.Spark.port;
import static spark.Spark.get;
import static spark.Spark.post;

import io.github.cdimascio.dotenv.Dotenv;

public class App {
    private Gson gson = new Gson();

    // This Map represents a database or other external infrastructure for
    // the purposes of this example. In a production system you would need
    // to set up a true persistent store.
    private Map<String, Object> accountStore = new HashMap<String, Object>();
    private String endpointSecret;

    public App (String getEndpointSecret) {
        endpointSecret = getEndpointSecret;
    }


    public Object getAccounts(Request request, Response response) {
        response.type("application/json");
        response.status(200);
        List<Object> list = new ArrayList<Object>(accountStore.values());
        return gson.toJson(list);
        
    }
    

    public Object handleWebhook(Request request, Response response) throws StripeException {
        String payload = request.body();
        String sigHeader = request.headers("Stripe-Signature");
        Event event = null;
        
        try {
            event = Webhook.constructEvent(
                payload, sigHeader, endpointSecret);
            } catch (JsonSyntaxException e) {
                // Invalid payload
                response.status(400);
                return "";
            } catch (SignatureVerificationException e) {
                // Invalid signature
                System.out.printf("Webhook Error: %s", e.getMessage());
                response.status(400);
                return "";
            }
            
            // Handle the event
            switch (event.getType()) {
                case "account.application.authorized":
                // We also trigger on customer events for testing purposes because
                // application.authorized events cannot be triggered via the CLI yet
	            case "customer.created":
                    Account account = Account.retrieve(event.getAccount());
                    accountStore.put(account.getId(), account);
                break;
                    // ... handle other event types
                default:
                    accountStore.remove(event.getAccount());
            }
            
            response.status(200);
            return "";
        }
        
        public static void main(String[] args) {
            Dotenv dotenv = Dotenv.load();
            Stripe.apiKey = dotenv.get("STRIPE_API_KEY");
            port(8080);

            App app = new App(dotenv.get("STRIPE_WEBHOOK_SECRET"));

            get("/accounts", (req, res) -> app.getAccounts(req, res));
            post("/webhook", (req, res) -> app.handleWebhook(req, res));
        }
    }
